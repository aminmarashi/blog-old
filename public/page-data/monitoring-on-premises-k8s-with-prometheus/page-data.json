{"componentChunkName":"component---src-components-posts-post-template-index-jsx","path":"/monitoring-on-premises-k8s-with-prometheus/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"architecture\" style=\"position:relative;\"><a href=\"#architecture\" aria-label=\"architecture permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architecture</h2>\n<p>In LitCodes have decided to setup our monitoring in the staging environment\nusing Prometheus and Grafana. Prometheus and Grafana go well together and they\nare widely used as open-source solutions for variety of businesses. We chose\nthose because of the level of control we get from them.</p>\n<p>In this article we will see how we used Prometheus and Grafana together to\nmonitor our hybrid cloud environment.</p>\n<p>We will also see a few challenges when we used these tools on top of Kubernetes.</p>\n<p>Our stack looks like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">==== applications =====       ====== monitoring ======\n|                     |       |                      |\n| Nodejs + PostgreSQL |       | Grafana + Prometheus |\n|                     |       |                      |\n=======================       ========================\n          |                              |\n====== system =========                  |\n|                     |                  |\n|   Kubernetes (k3s)  |  ----------------^\n|                     |\n=======================</code></pre></div>\n<p>Each of the boxes above represent a separate namespace in our Kubernetes\ncluster. The reason to choose a separate namespace for our monitoring tools\nfrom our applications is that we want to make sure we have an isolated\nenvironment for our running applications, any data breach in the monitoring\nside should have minimal effect on our application side.</p>\n<p>We also decided to run the monitoring tools on a separate node, mostly because\nour staging environment consists of small computers (A blend of old laptops and\nraspberry pi machines), and we needed more power for our monitoring dashboard\nto work. In fact, our monitoring tools are going to be similar to what we will\nhave on our production servers. We use AWS Lightsail instances to deploy our\nproduction cluster.</p>\n<p>In the future we might want to migrate to EKS (once we hit more traffic than we\ncan handle with our current setup), and we expect minimal to zero extra work to\nmigrate our environment, including monitoring to that setup.</p>\n<h2 id=\"installation\" style=\"position:relative;\"><a href=\"#installation\" aria-label=\"installation permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation</h2>\n<p>To install the monitoring tools we use the\n<a href=\"https://github.com/helm/charts/tree/master/stable/prometheus-operator\">prometheus-operator</a>\nHelm chart.</p>\n<p>We use the following configuration to set up Prometheus on our environments:</p>\n<div class=\"gatsby-code-title code-title-custom\">prometheus-operator.yaml</div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">namespaceOverride</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"monitoring\"</span>\n<span class=\"token key atrule\">kube-state-metrics</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> master<span class=\"token punctuation\">-</span>node\n<span class=\"token key atrule\">prometheusOperator</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> prometheus\n  <span class=\"token key atrule\">admissionWebhooks</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">patch</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> prometheus\n<span class=\"token key atrule\">prometheus</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">prometheusSpec</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> prometheus\n    <span class=\"token key atrule\">scrapeInterval</span><span class=\"token punctuation\">:</span> 5m\n    <span class=\"token key atrule\">evaluationInterval</span><span class=\"token punctuation\">:</span> 5m\n<span class=\"token key atrule\">alertmanager</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">alertmanagerSpec</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> alert<span class=\"token punctuation\">-</span>manager\n<span class=\"token key atrule\">nodeExporter</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">serviceMonitor</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">scrapeTimeout</span><span class=\"token punctuation\">:</span> 1m\n<span class=\"token key atrule\">grafana</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> grafana</code></pre></div>\n<p>The above setup lets us run <code class=\"language-text\">Grafana</code> and <code class=\"language-text\">Prometheus</code> on arbitrary nodes, we\nuse a custom-made K8s label called <code class=\"language-text\">role</code> to identify each node of our\nKubernetes cluster. In reality these may all point to the same nodes, or\nseparate nodes may be used for monitoring (depending on the staging or\nproduction environments and the workload).</p>\n<p>We keep our Grafana secret in a separate file and add it to our <code class=\"language-text\">gitignore</code>.</p>\n<div class=\"gatsby-code-title code-title-custom\">grafana-secret.yaml</div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">grafana</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">adminPassword</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>our admin password<span class=\"token punctuation\">]</span></code></pre></div>\n<p>For security reasons we keep the actual password only in our password manager,\nand share it with the team.</p>\n<p>In the future we are planning to use Vault + Consul to keep our configurations\nand secrets, but depending on the size of the team and number of secrets we are\ngoing to share we might decide that the existing approach is good enough.</p>\n<p>We then use the following command to run the monitoring tools:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span data-user=u data-host=h></span></span>helm repo update\nhelm search repo prometheus\nhelm <span class=\"token function\">install</span> --create-namespace --namespace monitoring prometheus-opera <span class=\"token punctuation\">\\</span>\n    stable/prometheus-operator -f prometheus-operator.yaml -f grafana-secret.yaml</code></pre></div>\n<p>We can then check the created pods using the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>kubectl -n monitoring get pods -o wide</code></pre></div>\n<p>Also to see the Kubernetes services we use the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>kubectl -n monitoring get services -o wide</code></pre></div>\n<p>For local development we use port-forwarding to expose the Grafana and Prometheus editor web services:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span data-user=u data-host=h></span></span><span class=\"token assign-left variable\">GRAFANA_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">3000</span>\n<span class=\"token assign-left variable\">PROMETHEUS_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">9090</span>\n<span class=\"token assign-left variable\">GRAFANA</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>kubectl -n monitoring get pod -l app.kubernetes.io/name<span class=\"token operator\">=</span>grafana -o name<span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">PROMETHEUS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>kubectl -n monitoring get pod -l <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>prometheus -o name<span class=\"token variable\">)</span></span>\nkubectl -n monitoring port-forward <span class=\"token variable\">$GRAFANA</span> <span class=\"token variable\">$GRAFANA_PORT</span> <span class=\"token operator\">&amp;</span>\nkubectl -n monitoring port-forward <span class=\"token variable\">$PROMETHEUS</span> <span class=\"token variable\">$PROMETHEUS_PORT</span> <span class=\"token operator\">&amp;</span></code></pre></div>\n<p>We use the following Traefik configuration to provide access to Grafana and\nPrometheus editors. Prometheus editor endpoint is not authenticated, therefore\nwe currently use basic authentication on top of Traefik for that page.</p>","excerpt":"Architecture In LitCodes have decided to setup our monitoring in the staging environment\nusing Prometheus and Grafana. Prometheus and…","fields":{"slug":"/monitoring-on-premises-k8s-with-prometheus/"},"frontmatter":{"title":"Monitoring on-premises kubernetes with Prometheus and Grafana","date":"12/14/2020","tags":["DevOps","Monitoring"]}}},"pageContext":{"slug":"/monitoring-on-premises-k8s-with-prometheus/"}},"staticQueryHashes":["3649515864","63159454"]}