{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"d87d7bcf-3102-5f52-8303-3cef43303c38","html":"<h1 id=\"benchmarking-and-profiling\" style=\"position:relative;\"><a href=\"#benchmarking-and-profiling\" aria-label=\"benchmarking and profiling permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Benchmarking and profiling</h1>\n<p>When it comes to writing code, performance is always a concern. To measure the\nperformance of code there are two major ways of measurement:</p>\n<ul>\n<li>Profiling: measuring the time spent on each code section/line</li>\n<li>Benchmarking: measuring the overall performance of code compared to a\nbaseline</li>\n</ul>\n<h2 id=\"profiling\" style=\"position:relative;\"><a href=\"#profiling\" aria-label=\"profiling permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Profiling</h2>\n<p>Profiling is helpful when you want to identify the slower parts of your code\nand refactor them to make them faster. According to Amdahl's law, the most\namount of performance improvement can come from the slowest part of your code.</p>\n<p>Profiling is also useful to show the nature of your application. For example,\nif they are IO-bound, CPU, or memory bound, etc. This information is\nimportant to understand which aspect of your app can be improved.</p>\n<h3 id=\"profiling-an-application-that-forks\" style=\"position:relative;\"><a href=\"#profiling-an-application-that-forks\" aria-label=\"profiling an application that forks permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Profiling an application that forks</h3>\n<p>If you are profiling a server that is designed to handle multiple clients at a\ntime, chances are the server makes forks of itself to handle the requests, a\nprofiler then needs to know how to attach itself to all those processes/threads\nand merge the result to get a unified view of the whole application.</p>\n<h3 id=\"profiler-overhead\" style=\"position:relative;\"><a href=\"#profiler-overhead\" aria-label=\"profiler overhead permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Profiler overhead</h3>\n<p>Profilers need to do their best to avoid affecting the application execution\nthat is being profiled. One way is to delay analysis of the result until after the\napplication is finished, this usually means saving the raw metrics in a file,\nbut profilers need to be careful not to include the time required to write\nthat info to the disk in their time measurements.</p>\n<h3 id=\"sampling-vs-non-sampling\" style=\"position:relative;\"><a href=\"#sampling-vs-non-sampling\" aria-label=\"sampling vs non sampling permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sampling vs. non-sampling</h3>\n<p>Sampling profilers look at the call stack at a point of time, however,\nnon-sampling profilers use provided callbacks to mark the entry and exit points\nof the code and calculate the time based on that.  Sampling profilers have less\nperformance overhead than non-sampling profilers and are more suitable if you\nare measuring the performance of code, however, because they sample the call\nstack with an interval, it's likely that they miss functions that take less\ntime (about 5ms or less) to execute, and therefore are less accurate.</p>\n<h3 id=\"statement-vs-subroutine\" style=\"position:relative;\"><a href=\"#statement-vs-subroutine\" aria-label=\"statement vs subroutine permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Statement vs. Subroutine</h3>\n<p>Statement profiling works by measuring the time spent between entering one\nstatement and entering the next statement. A subroutine profiler, however,\nmeasures the time between entering a function execution and exiting the\nfunction. Most of the time subroutine profiling should be preferred over\nstatement profiling as it leaves less profile footprint on the time\nmeasurements. Statement profiling may be useful in case the subroutine\nprofiling result is not granular enough.</p>\n<h3 id=\"memory-profiling\" style=\"position:relative;\"><a href=\"#memory-profiling\" aria-label=\"memory profiling permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Memory profiling</h3>\n<p>Memory profiling works by taking a snapshot of the memory allocated for the\nrunning application. Those snapshots then can be used to detect unwanted growth\nin the allocated memory and potential memory leaks.</p>\n<h2 id=\"benchmarking\" style=\"position:relative;\"><a href=\"#benchmarking\" aria-label=\"benchmarking permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Benchmarking</h2>\n<p>Benchmarking can be done to compare the performance of two applications, maybe\ntwo versions of the same application, (software benchmark), or performance of\nthe same application on two different machines (hardware benchmark).</p>\n<h3 id=\"hardware-benchmark\" style=\"position:relative;\"><a href=\"#hardware-benchmark\" aria-label=\"hardware benchmark permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hardware benchmark</h3>\n<p>There are standard benchmarks with a known result on different hardware that\ncan be used to measure the performance of your machine.</p>\n<h3 id=\"software-benchmark\" style=\"position:relative;\"><a href=\"#software-benchmark\" aria-label=\"software benchmark permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Software benchmark</h3>\n<p>Examples are comparing the performance of different browsers rendering a page,\nor different databases querying data.</p>\n<h2 id=\"micro-benchmarking\" style=\"position:relative;\"><a href=\"#micro-benchmarking\" aria-label=\"micro benchmarking permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Micro-benchmarking</h2>\n<p>Micro-benchmarking is used when we want to compare a small piece of software\n(a.k.a. a function) against a similar function or a different version of the\nsame function. Micro-benchmarking is mostly useful after you identified\nfunctions that are suitable candidates for optimization and you're working on\noptimizing them.</p>\n<p>In that case, you might want to use one or more implementations of the same\nalgorithm to pick the most suitable solution.</p>","excerpt":"Benchmarking and profiling When it comes to writing code, performance is always a concern. To measure the\nperformance of code there are two major ways of measurement: Profiling: m…","timeToRead":3,"fields":{"slug":"/intro-to-benchmarking-and-profiling/"},"frontmatter":{"date":"05/15/2020","title":"Introduction to benchmarking and profiling","tags":["benchmarking","profiling","introduction"],"excerpt":null,"draft":null}}},{"node":{"id":"08cef993-42b6-54c1-9321-ae1c15d3a3cf","html":"<p>Cool things you can do with an ssh client, and a Linux machine. Secure Shell is\na protocol to connect to a machine over the network securely. The\n<a href=\"https://www.openssh.com/\" target=\"_blank\">OpenSSH</a>\nclient is more than just a secure shell. It has quite a few features that make\nit uniquely useful when connecting two or more machines.</p>\n<p>This post is inspired by\n<a href=\"https://smallstep.com/blog/ssh-tricks-and-tips/\" target=\"_blank\">ssh tips and tricks</a>.</p>\n<h2 id=\"password-less-authentication\" style=\"position:relative;\"><a href=\"#password-less-authentication\" aria-label=\"password less authentication permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Password-less authentication</h2>\n<p>In addition to password authentication, there are other methods that OpenSSH\nsupports. One of the most well-known authentication methods is public-key\nauthentication. You can maintain a list of known public keys on the server and\nallow password-less login whenever a client connects using the corresponding\nprivate key.</p>\n<div class=\"gatsby-code-title code-title-custom\">authorized_keys</div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCm7Q3M5QH7aoFL<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>The above can be copied from an RSA key that usually exists in <code class=\"language-text\">~/.ssh</code> on\nLinux machines.</p>\n<p>A key can be added to a server using the <code class=\"language-text\">ssh-copy-id</code> command if you already\nhave another way of connecting to the server.</p>\n<h2 id=\"forwarding-ssh-keys\" style=\"position:relative;\"><a href=\"#forwarding-ssh-keys\" aria-label=\"forwarding ssh keys permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Forwarding ssh keys</h2>\n<p>You can use a server as a <code class=\"language-text\">hop</code> to connect to another server using ssh. If you\nhave public key access to the second server, you can forward your ssh-agent to\nthe first ssh session.</p>\n<p>This works without having to copy your keys to the <code class=\"language-text\">hop</code> server.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=hop></span><span data-user=u data-host=hop></span></span><span class=\"token function\">ssh</span> the-internet\nu@the-internet: Permission denied <span class=\"token punctuation\">(</span>publickey<span class=\"token punctuation\">)</span>.</code></pre></div>\n<p>Connecting to the hop with <code class=\"language-text\">-A</code> forwards the ssh-agent:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">ssh</span> -A hop\nu@hop:~ $</code></pre></div>\n<p>And now we can connect to the server with public-key authentication:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=hop></span><span></span></span><span class=\"token function\">ssh</span> the-internet\nu@the-internet:~ $</code></pre></div>\n<blockquote>\n<p>Although this can be useful in some cases, it's not recommended to forward\nyour ssh-agent, please refer to the ssh man page to learn more.</p>\n</blockquote>\n<h2 id=\"running-a-command\" style=\"position:relative;\"><a href=\"#running-a-command\" aria-label=\"running a command permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running a command</h2>\n<p>You can pass a command to run on the remote machine, the command will run\ninside your default shell and the output is printed to the standard output.</p>\n<p>For example you can check the date and time on the server:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">ssh</span> the-internet <span class=\"token function\">date</span>\nSat 02 May <span class=\"token number\">2020</span> <span class=\"token number\">11</span>:51:10 PM +08</code></pre></div>\n<blockquote>\n<p>We have a list of cool <a href=\"/hacking-with-ssh-one-liners\">ssh one-liners</a> you can\ndo with this feature. The possiblities are endless.</p>\n</blockquote>\n<h2 id=\"redirecting-x11\" style=\"position:relative;\"><a href=\"#redirecting-x11\" aria-label=\"redirecting x11 permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redirecting X11</h2>\n<p>Have you ever wanted to run a GUI application on a remote server? Sure there\nare ways like VNC, etc. but the experience won't be as good as running the app\non your machine.</p>\n<p>If your remote server and your machine both are running a Linux desktop,\nthere is a (relatively) secure and convenient way of running the app in the\nremote server using the X11 server already running on your machine.</p>\n<p>This works because GUI applications can be a client to any X11 server over the\nnetwork.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">ssh</span> -XC the-internet chromium-browser</code></pre></div>\n<p>This will open a <code class=\"language-text\">chromium-browser</code> on <code class=\"language-text\">the-internet</code> server, and connects it\nto your X11 display. You can interact with the window just like you interact\nwith any other window on your desktop. You can even copy/paste both ways to\nthat window.</p>\n<blockquote>\n<p>The <code class=\"language-text\">-X</code> option opens a connection to X11 on your machine from the remote\nserver which the remote GUI app connects to. Use this option with caution on\nservers you <em>absolutely</em> trust, please refer to the <code class=\"language-text\">ssh</code> man page for more\ninfo about the security implications. </p>\n</blockquote>\n<p>The <code class=\"language-text\">-C</code> is optional, it enables compression on the connection which makes the\ninteraction faster.</p>\n<h2 id=\"create-a-socks-proxy\" style=\"position:relative;\"><a href=\"#create-a-socks-proxy\" aria-label=\"create a socks proxy permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a socks proxy</h2>\n<p>If you want to use your remote server as a proxy server, you can simply use the\n<code class=\"language-text\">-D</code> option, with a port. The ssh client will bind to that port and forward any\nconnections to that port to your server.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">ssh</span> -Nf -D127.0.0.1:1080 the-internet</code></pre></div>\n<p>The <code class=\"language-text\">-D</code> option will allocate port <code class=\"language-text\">1080</code> on your machine, you can set\n<code class=\"language-text\">127.0.0.1:1080</code> as the socks5 proxy in your browser and connect to the server.</p>\n<p>The <code class=\"language-text\">-Nf</code> option combination is optional, it basically runs the ssh client in\nthe background.</p>\n<h2 id=\"connecting-via-a-hop\" style=\"position:relative;\"><a href=\"#connecting-via-a-hop\" aria-label=\"connecting via a hop permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connecting via a hop</h2>\n<p>There are cases when an ssh server is not directly accessible to our machine,\nbut we have access to it through a hop (e.g. a bastion server). In that case,\nssh supports connecting to one or more hops before connecting to the target\nserver using the <code class=\"language-text\">-J</code> option.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">ssh</span> -J user1@the-internet user2@the-skynet</code></pre></div>\n<p>In the above example ssh client connects to the hop <code class=\"language-text\">the-internet</code>\nfirst, and through that server makes a TCP connection to <code class=\"language-text\">the-skynet</code> server.\nOther options like dynamic port forwarding work with this method. You can even\nspecify different users and different ports for the hops and the target server.</p>","excerpt":"Cool things you can do with an ssh client, and a Linux machine. Secure Shell is\na protocol to connect to a machine over the network securely. The\nOpenSSH\nclient is more than just …","timeToRead":4,"fields":{"slug":"/hacking-with-ssh/"},"frontmatter":{"date":"05/05/2020","title":"Hacking with ssh","tags":["ssh","hacking"],"excerpt":null,"draft":null}}},{"node":{"id":"c47ad14f-7889-50bc-99d2-48399717662c","html":"<p>You can run a one-line command in bash on the remote server you ssh to. There\nis all sorts of cool things you can do with an ssh client, learn more in\n<a href=\"/hacking-with-ssh\">hacking with ssh</a> post.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">ssh</span> username@hostname <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span></code></pre></div>\n<p>The command is passed as an argument to ssh. If the command is anything but a\nsingle word, you are encouraged to wrap it with a single quote character (<code class=\"language-text\">&#39;</code>).\nIf the username is the same as your current machine username you can omit it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span></span></span><span class=\"token function\">ssh</span> the-internet <span class=\"token string\">'ls /'</span>\nbin\nboot</code></pre></div>\n<p>That's a very cool feature, considering that you can connect to both the output\n<em>and</em> the input of the command.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span></span></span><span class=\"token function\">ssh</span> -t the-internet <span class=\"token string\">'read -pecho\\>\\  x; echo <span class=\"token variable\">$x</span>'</span>\necho<span class=\"token operator\">></span> hello\nhello</code></pre></div>\n<p>The <code class=\"language-text\">-t</code> option above is necessary to make the <code class=\"language-text\">echo&gt;</code> prompt appear on the\nscreen. But even without that option, we can still interact with the input of\nthe <code class=\"language-text\">read</code> command.</p>\n<h2 id=\"copying-a-file-over-the-server\" style=\"position:relative;\"><a href=\"#copying-a-file-over-the-server\" aria-label=\"copying a file over the server permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Copying a file over the server</h2>\n<p>A file can be uploaded to or downloaded from the server easily if we have\naccess to execute commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span></span></span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hello world!'</span> <span class=\"token operator\">></span> /tmp/message\n<span class=\"token function\">cat</span> /tmp/message <span class=\"token operator\">|</span><span class=\"token function\">ssh</span> the-internet <span class=\"token string\">'cat - > /tmp/remote-message'</span>\n<span class=\"token function\">ssh</span> the-internet <span class=\"token string\">'cat /tmp/remote-message'</span>\nHello world<span class=\"token operator\">!</span></code></pre></div>\n<h2 id=\"copying-large-files-fast\" style=\"position:relative;\"><a href=\"#copying-large-files-fast\" aria-label=\"copying large files fast permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Copying large files fast</h2>\n<p>With a little help from our friend <code class=\"language-text\">gzip</code> we can even upload/download large\nfiles. We are using a file containing only zeros, and therefore very easy to\nzip, but in reality, text files are usually easy to zip as well, therefore this\nmethod is useful.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">ssh</span> the-internet <span class=\"token string\">'du -Dsh /var/tmp/large'</span>\n<span class=\"token number\">1</span>.0G\t/var/tmp/large</code></pre></div>\n<p>Now using <code class=\"language-text\">gzip</code> we can zip the file and send the zipped file to <code class=\"language-text\">gunzip</code> on\nour local machine to extract:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span></span><span></span><span></span></span><span class=\"token function\">time</span> <span class=\"token function\">ssh</span> the-internet <span class=\"token string\">'gzip --stdout /var/tmp/large'</span> <span class=\"token operator\">|</span> gunzip <span class=\"token operator\">></span> /var/tmp/large\n\nreal\t0m19.457s\nuser\t0m5.468s\nsys\t0m0.715s</code></pre></div>\n<p>We have the large file in our local machine in no time 🎉 :</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">du</span> -sh /var/tmp/large\n<span class=\"token number\">1</span>.1G\t/var/tmp/large</code></pre></div>\n<h2 id=\"advanced-downloading-using-pv\" style=\"position:relative;\"><a href=\"#advanced-downloading-using-pv\" aria-label=\"advanced downloading using pv permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced downloading using pv</h2>\n<p>Suppose you want to see the progress of the file being downloaded, or have more\ncontrol the rate of download.</p>\n<p>There is a relatively large file on our server called <code class=\"language-text\">random</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">ssh</span> the-internet <span class=\"token string\">'du -Dsh /var/tmp/random'</span>\n217M\t/var/tmp/random</code></pre></div>\n<p>We can see a progress bar when downloading the file (this requires <code class=\"language-text\">pv</code> to be\ninstalled):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">ssh</span> the-internet <span class=\"token string\">'cat /var/tmp/random'</span> <span class=\"token operator\">|</span> <span class=\"token function\">pv</span> -s217m <span class=\"token operator\">|</span> <span class=\"token function\">cat</span> - <span class=\"token operator\">></span> random\n 103MiB <span class=\"token number\">0</span>:00:14 <span class=\"token punctuation\">[</span><span class=\"token number\">7</span>.81MiB/s<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>        <span class=\"token punctuation\">]</span> <span class=\"token number\">47</span>% ETA <span class=\"token number\">0</span>:00:15</code></pre></div>\n<p>The <code class=\"language-text\">-s217m</code> tells <code class=\"language-text\">pv</code> about the size of the file, if not given the percentage\ncannot be calculated.</p>\n<p>Or we can limit the download rate to <code class=\"language-text\">1 MB</code> using <code class=\"language-text\">-L1m</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">ssh</span> the-internet <span class=\"token string\">'cat /var/tmp/random'</span> <span class=\"token operator\">|</span> <span class=\"token function\">pv</span> -s217m -L1m <span class=\"token operator\">|</span> <span class=\"token function\">cat</span> - <span class=\"token operator\">></span> random\n<span class=\"token number\">20</span>.0MiB <span class=\"token number\">0</span>:00:20 <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>.00MiB/s<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">></span>             <span class=\"token punctuation\">]</span>  <span class=\"token number\">9</span>% ETA <span class=\"token number\">0</span>:03:17</code></pre></div>\n<h2 id=\"running-a-command-on-multiple-servers\" style=\"position:relative;\"><a href=\"#running-a-command-on-multiple-servers\" aria-label=\"running a command on multiple servers permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running a command on multiple servers</h2>\n<p>There are times when we want to run a repatitive command on multiple servers,\nwe can automate this using ssh. In fact that's how\n<a href=\"https://www.ansible.com/\" target=\"_blank\">Ansible</a>\nworks.</p>\n<p>One use-case might be to change password for a user on multiple machines. Let's\nchange password for user <code class=\"language-text\">terminator</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"supersecure<span class=\"token entity\" title=\"\\n\">\\n</span>supersecure\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">ssh</span> the-internet <span class=\"token string\">'sudo passwd terminator'</span>\nNew password: Retype new password: passwd: password updated successfully</code></pre></div>\n<p>We can type in the hosts to change the <code class=\"language-text\">terminator</code> password on:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span></span><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">xargs</span> -IHOST <span class=\"token function\">sh</span> -c <span class=\"token string\">'echo \"supersecure<span class=\"token entity\" title=\"\\n\">\\n</span>supersecure\" | ssh HOST \"sudo passwd terminator\"'</span>\nthe-internet\nNew password: Retype new password: passwd: password updated successfully\nthe-skynet\nNew password: Retype new password: passwd: password updated successfully</code></pre></div>\n<p>Or we can automate that and provide the list of hosts:</p>\n<div class=\"gatsby-code-title code-title-custom\">hosts</div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">the-internet\nthe-skynet</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span></span></span><span class=\"token function\">xargs</span> -IHOST <span class=\"token function\">sh</span> -c <span class=\"token string\">'echo \"supersecure<span class=\"token entity\" title=\"\\n\">\\n</span>supersecure\" | ssh HOST \"sudo passwd terminator\"'</span> <span class=\"token operator\">&lt;</span> hosts\nNew password: Retype new password: passwd: password updated successfully\nNew password: Retype new password: passwd: password updated successfully</code></pre></div>\n<h2 id=\"persistent-ssh-session\" style=\"position:relative;\"><a href=\"#persistent-ssh-session\" aria-label=\"persistent ssh session permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Persistent ssh session</h2>\n<p>Now let's see how we can make use of a combination of ssh and <code class=\"language-text\">tmux</code>. <code class=\"language-text\">tmux</code>\ncan be used to have an on-going shell in your server that multiple people can\nconnect to.</p>\n<p>To start a session called <code class=\"language-text\">mysession</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">ssh</span> -t the-internet <span class=\"token string\">'tmux new-session -ds mysession'</span>\nConnection to the-internet closed.</code></pre></div>\n<p>The <code class=\"language-text\">-t</code> tells ssh client to allocate a tty device for using with the tmux\nsession.</p>\n<p>Now anyone with ssh access to that server can connect to the session.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span></span></span><span class=\"token function\">ssh</span> -t the-internet <span class=\"token string\">'tmux attach -t mysession'</span>\n<span class=\"token punctuation\">[</span>detached <span class=\"token punctuation\">(</span>from session mysession<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nConnection to the-internet closed.</code></pre></div>\n<p>It is important to detach from the tmux session rather than exit from it if you\nwant to keep it open for the next time.</p>\n<p>You can get a list of clients connected to that session at the moment:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span></span></span><span class=\"token function\">ssh</span> -t the-internet <span class=\"token string\">'tmux list-clients -t mysession'</span>\n/dev/pts/1: mysession <span class=\"token punctuation\">[</span>150x36 xterm-256color<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>utf8<span class=\"token punctuation\">)</span>\nConnection to the-internet closed.</code></pre></div>\n<h2 id=\"connecting-to-a-server-using-a-hop\" style=\"position:relative;\"><a href=\"#connecting-to-a-server-using-a-hop\" aria-label=\"connecting to a server using a hop permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connecting to a server using a hop</h2>\n<p>In case we want to access a third server that is only accessible from a hop\nserver:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">ssh</span> -tA hop <span class=\"token string\">'ssh the-internet'</span>\nu@the-internet:~ $</code></pre></div>\n<p>Without <code class=\"language-text\">-t</code> ssh won't allocate tty, the session still works though. When <code class=\"language-text\">-A</code>\nis passed the ssh agent is forwarded to the hop, it is only necessary if the\n<code class=\"language-text\">hop</code> server doesn't have public key access to <code class=\"language-text\">the-internet</code> host.</p>\n<p>There is a better way of doing this using the <code class=\"language-text\">-J</code> option of ssh client, see\nthe <a href=\"/hacking-with-ssh#connecting-via-a-hop\">hacking with ssh</a> post for more\ninfo.</p>","excerpt":"You can run a one-line command in bash on the remote server you ssh to. There\nis all sorts of cool things you can do with an ssh client, learn more in\nhacking with ssh post. The c…","timeToRead":5,"fields":{"slug":"/hacking-with-ssh-one-liners/"},"frontmatter":{"date":"05/05/2020","title":"Hacking with ssh one-liners","tags":["ssh","hacking"],"excerpt":null,"draft":null}}},{"node":{"id":"bd7f8b24-6628-5592-ac6a-59865db80268","html":"<p><code class=\"language-text\">ARM</code> machines can be cheaper alternatives to <code class=\"language-text\">X86_64</code> instances either running\non bare metal (e.g. on Raspberyy Pi) or in cloud.</p>\n<p>They are becoming more and more popular and they're making their way into the\nconsumer electronic.</p>\n<p>Chef is a popular <code class=\"language-text\">infrastructure-as-a-code</code> tool, which you can install to\nremotely or locally manage your servers.</p>\n<p>In this post you can find how to build your favorite version of Chef for ARM.</p>\n<blockquote>\n<p>At the time of writing this article the most recent versions of Chef are\navailable to download for ARM but not for all Linux distributions, namely\nDebian.</p>\n</blockquote>\n<h2 id=\"compiling-ruby\" style=\"position:relative;\"><a href=\"#compiling-ruby\" aria-label=\"compiling ruby permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compiling Ruby</h2>\n<p>The\n<a href=\"https://github.com/ruby/ruby#git\" target=\"_blank\">Ruby GitHub page</a>\nis very helpful when it comes to compiling Ruby from source code.</p>\n<blockquote>\n<p>You can skip this step and go directly to <a href=\"#compiling-chef\">Compiling\nChef</a> if your distro already has a suitable ruby version\navailable. In my case, the version was too old for the Chef build to work.</p>\n</blockquote>\n<p>The building process is as easy as:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span></span>./configure\n<span class=\"token function\">make</span></code></pre></div>\n<h3 id=\"installation-in-a-destination-directory\" style=\"position:relative;\"><a href=\"#installation-in-a-destination-directory\" aria-label=\"installation in a destination directory permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation in a destination directory</h3>\n<p>Now a <code class=\"language-text\">make install</code> will install Ruby in <code class=\"language-text\">/usr</code> directory, but that behavior\ncan be changed using <code class=\"language-text\">DESTDIR</code> option:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">make</span> <span class=\"token function\">install</span> <span class=\"token assign-left variable\">DESTDIR</span><span class=\"token operator\">=</span>~/ruby</code></pre></div>\n<p>The above command will install the build in <code class=\"language-text\">~/ruby</code>. This is useful if <code class=\"language-text\">root</code>\naccess is not available, or if the build is meant to be copied to a different\nmachine.</p>\n<h3 id=\"install-ruby-globally\" style=\"position:relative;\"><a href=\"#install-ruby-globally\" aria-label=\"install ruby globally permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install Ruby globally</h3>\n<p>After building Ruby, you can install it globally by:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -r ~/ruby/usr/* /usr</code></pre></div>\n<h2 id=\"compiling-chef\" style=\"position:relative;\"><a href=\"#compiling-chef\" aria-label=\"compiling chef permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compiling Chef</h2>\n<p>You will need <code class=\"language-text\">Ruby</code> and <code class=\"language-text\">bundler</code> to be installed to build Chef. <code class=\"language-text\">gem</code> is also\nneeded which comes as a package with <code class=\"language-text\">Ruby</code>.</p>\n<h3 id=\"installing-bundler\" style=\"position:relative;\"><a href=\"#installing-bundler\" aria-label=\"installing bundler permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing bundler</h3>\n<p>Make sure <code class=\"language-text\">bundler</code> is installed, if not install it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>gem <span class=\"token function\">install</span> bundler</code></pre></div>\n<h3 id=\"downloading-the-source\" style=\"position:relative;\"><a href=\"#downloading-the-source\" aria-label=\"downloading the source permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Downloading the source</h3>\n<p>Download the specific version of Chef source from\n<a href=\"https://github.com/chef/chef/\" target=\"_blank\">Chef on GitHub</a>\nthen extract the package.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span data-user=u data-host=h></span></span><span class=\"token function\">wget</span> https://github.com/chef/chef/archive/v15.6.10.tar.gz\n<span class=\"token function\">tar</span> xf v15.6.10.tar.gz\n<span class=\"token builtin class-name\">cd</span> ~/chef-15.6.10/omnibus <span class=\"token comment\"># yes, chef is built from the omnibus folder</span></code></pre></div>\n<h3 id=\"installing-dependencies\" style=\"position:relative;\"><a href=\"#installing-dependencies\" aria-label=\"installing dependencies permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing dependencies</h3>\n<p>Then install the required dependencies for building chef locally:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>bundle <span class=\"token function\">install</span> --without development --path<span class=\"token operator\">=</span>.bundle</code></pre></div>\n<p>This will install all the dependencies in <code class=\"language-text\">.bundle</code> inside the source folder.</p>\n<h3 id=\"building-using-omnibus\" style=\"position:relative;\"><a href=\"#building-using-omnibus\" aria-label=\"building using omnibus permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building using omnibus</h3>\n<p>After that start building Chef using <code class=\"language-text\">omnibus</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>bundle <span class=\"token builtin class-name\">exec</span> omnibus build chef -l internal</code></pre></div>\n<blockquote>\n<p><a href=\"https://github.com/chef/omnibus\" target=\"_blank\">Omnibus</a>\nis a packaging solution that makes sure the packages and all its dependencies\nare installed in a way that is easily manageable and will not conflict with the\nexisting packages installed on your system.</p>\n</blockquote>\n<p>The result of the above build is a package specific to your OS, in this case,\nI'm building Chef for Debian, so there will be a <code class=\"language-text\">.deb</code> file that I will able\nto install and uninstall using <code class=\"language-text\">dpkg</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">ls</span> pkg/\nchef_15.6.10*.deb</code></pre></div>\n<h3 id=\"licensing-issues\" style=\"position:relative;\"><a href=\"#licensing-issues\" aria-label=\"licensing issues permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Licensing issues</h3>\n<p>In my case the build failed because of a licensing error, you can try\nignoring licensing problems for the build, read more about that in\n<a href=\"https://github.com/chef/omnibus/issues/696\" target=\"_blank\">issue #696</a>.</p>\n<p>I fixed that by editing the <code class=\"language-text\">omnibus.rb</code> file (the omnibus config) and adding\nthese two lines:</p>\n<div class=\"gatsby-code-title code-title-custom\">omnibus.rb</div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">fatal_licensing_warnings <span class=\"token boolean\">false</span>\nfatal_transitive_dependency_licensing_warnings <span class=\"token boolean\">false</span></code></pre></div>\n<h3 id=\"installation-of-the-built-deb-package\" style=\"position:relative;\"><a href=\"#installation-of-the-built-deb-package\" aria-label=\"installation of the built deb package permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation of the built deb package</h3>\n<p>Now we can easily install the package:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">sudo</span> dpkg -i pkg/chef_15.6.10*.deb</code></pre></div>\n<p>And verify the desired version is installed:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span>chef-client -v\nChef Infra Client: <span class=\"token number\">15.6</span>.10</code></pre></div>","excerpt":"machines can be cheaper alternatives to  instances either running\non bare metal (e.g. on Raspberyy Pi) or in cloud. They are becoming more and more popular and they're making thei…","timeToRead":3,"fields":{"slug":"/how-to-compile-chef-from-source/"},"frontmatter":{"date":"04/29/2020","title":"How to compile Chef from source","tags":["How-to"],"excerpt":null,"draft":null}}},{"node":{"id":"392dddc6-1f0d-5892-a395-d89ee74242f4","html":"<p>In this post, we will use <code class=\"language-text\">Qemu multiarch</code> inside Docker to compile source\ncodes for <code class=\"language-text\">ARM</code> processors.</p>\n<blockquote>\n<p>If you want to know how to run an <code class=\"language-text\">ARM64</code> Debian inside Docker skip to <a href=\"#qemu-multiarch\">Qemu\nmultiarch</a></p>\n</blockquote>\n<h2 id=\"arm-architecture\" style=\"position:relative;\"><a href=\"#arm-architecture\" aria-label=\"arm architecture permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARM architecture</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/ARM_architecture\" target=\"_blank\">ARM</a>\nrefers to a large group of CPU architectures designed\nfor embedded systems and low-cost computing. There are many variations of ARM\ninstruction code and unfortunately, they are not very compatible with each\nother.  It's important to identify the target architecture otherwise the\nbuilt files may not be compatible with the target machine.</p>\n<p>For this post, I am going to compile for <code class=\"language-text\">arm64</code> (aka <code class=\"language-text\">aarch64</code> as GCC calls\nit). This architecture is used on <code class=\"language-text\">AWS ARM instances</code> which are available for a\ncheaper price than the <code class=\"language-text\">X86_64</code> ones.</p>\n<p>Let's check the architecture of a Debian machine running on <code class=\"language-text\">aarch64</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">uname</span> -a\nLinux <span class=\"token function\">hostname</span> <span class=\"token punctuation\">[</span>version<span class=\"token punctuation\">]</span> <span class=\"token comment\">#1 SMP Debian 4.9.210-1 [date] aarch64 GNU/Linux</span>\ndpkg --print-architecture\narm64</code></pre></div>\n<p>As you can see <code class=\"language-text\">arm64</code> and <code class=\"language-text\">aarch64</code> are used almost interchangeably.</p>\n<h2 id=\"building-using-docker\" style=\"position:relative;\"><a href=\"#building-using-docker\" aria-label=\"building using docker permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building using Docker</h2>\n<p>There are two ways we can go about building a source file for a different\narchitecture of your current machine (e.g. your machine runs on an <code class=\"language-text\">X86_64</code> CPU\nand you want to compile for <code class=\"language-text\">arm64</code>).</p>\n<p>One way is <code class=\"language-text\">cross-compiling</code> inside a machine with a different architecture\nusing <code class=\"language-text\">aarch64-linux-gnu-gcc</code> which is a GCC cross-compiler for <code class=\"language-text\">arm64</code>\narchitecture.</p>\n<p>The other (and less complicated) way is to make the package inside a Virtual\nMachine. I will use <code class=\"language-text\">Docker</code> with <code class=\"language-text\">Qemu multiarch</code> which acts similar to a VM\nand allows running Docker images built for other architectures including\n<code class=\"language-text\">aarch64</code>.</p>\n<h3 id=\"qemu-multiarch\" style=\"position:relative;\"><a href=\"#qemu-multiarch\" aria-label=\"qemu multiarch permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Qemu multiarch</h3>\n<p>First, we will need to enable\n<a href=\"https://github.com/multiarch/qemu-user-static\" target=\"_blank\">qemu-user-static</a>\nwhich allows us to run the Docker image built for ARM.</p>\n<p><strong>Note:</strong> This setup uses <code class=\"language-text\">binfmt</code>, read more:\n<a href=\"https://en.wikipedia.org/wiki/Binfmt_misc\" target=\"_blank\">binfmt_misc</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>docker run --rm --privileged multiarch/qemu-user-static --reset -p <span class=\"token function\">yes</span></code></pre></div>\n<p>This will setup the multiarch files and now we can run Docker images that are\nbuilt for different architectures seamlessly.</p>\n<h3 id=\"debian-for-aarch64\" style=\"position:relative;\"><a href=\"#debian-for-aarch64\" aria-label=\"debian for aarch64 permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debian for aarch64</h3>\n<p>After enabling mutliarch, we can simply run the Debian image built for ARM:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span>docker run -it arm64v8/debian:stretch\nroot@3b853bce5181:/<span class=\"token comment\">#</span></code></pre></div>\n<blockquote>\n<p>The Docker image for\n<a href=\"https://hub.docker.com/r/aarch64/debian\" target=\"_blank\">aarch64</a>\nis officially deprecated in favor of\n<a href=\"https://hub.docker.com/r/arm64v8/debian/\" target=\"_blank\">arch64v8</a>\nwhich has support for broader variants of the architecture.</p>\n</blockquote>\n<p>Now we can see the architecture is shown to be ARM:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">uname</span> -a\nLinux 3b853bce5181 <span class=\"token number\">5.3</span>.0-46-generic <span class=\"token comment\">#38-Ubuntu SMP [date] aarch64 GNU/Linux</span>\ndpkg --print-architecture\narm64</code></pre></div>\n<p>That's it, we should now be able to download the desired source code and build\nit for <code class=\"language-text\">aarch64</code> inside that container.</p>\n<p>For this post we will stick to a very simple program written in C.</p>\n<h3 id=\"building-a-simple-helloworld-in-c\" style=\"position:relative;\"><a href=\"#building-a-simple-helloworld-in-c\" aria-label=\"building a simple helloworld in c permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building a simple helloworld in C</h3>\n<p>Just for the sake of the demonstration, let's write a simple hello world <code class=\"language-text\">C</code> and\ncompile it for ARM.</p>\n<div class=\"gatsby-code-title code-title-custom\">helloworld.c</div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First we will need to install <code class=\"language-text\">gcc</code> to compile our source code:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> gcc <span class=\"token function\">file</span> -y</code></pre></div>\n<p>Then we can compile our source code and run it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span></span></span>gcc -o helloworld helloworld.c\n./helloworld\nHello, World<span class=\"token operator\">!</span></code></pre></div>\n<p>We can also use the <code class=\"language-text\">file</code> command to tell us about the binary format of the\nexecutable we just built:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">file</span> ./helloworld\nhelloworld: ELF <span class=\"token number\">64</span>-bit LSB shared object, ARM aarch64, version <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>SYSV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>It's correctly built for ARM 🎉.</p>\n<p>One little trick we can do with GCC is that we can see the assembler code,\ntherefore we can see what the instruction set looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>gcc -o helloworld.asm -S helloworld.c</code></pre></div>\n<p>Contents of <code class=\"language-text\">helloworld.asm</code> will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">\t.arch armv8<span class=\"token operator\">-</span>a\n\t.file\t<span class=\"token string\">\"helloworld.c\"</span>\n\t.section\t.rodata\n\t.align\t<span class=\"token number\">3</span>\n<span class=\"token label function\">.LC0:</span>\n\t.string\t<span class=\"token string\">\"Hello, World!\"</span>\n\t.text\n\t.align\t<span class=\"token number\">2</span>\n\t.<span class=\"token keyword\">global\tmain</span>\n\t.type\tmain, <span class=\"token operator\">%</span>function\n<span class=\"token label function\">main:</span>\n\tstp\tx29, x30, <span class=\"token operator\">[</span><span class=\"token register variable\">sp</span>, <span class=\"token operator\">-</span><span class=\"token number\">16</span><span class=\"token operator\">]</span><span class=\"token operator\">!</span>\n\tadd\tx29, <span class=\"token register variable\">sp</span>, <span class=\"token number\">0</span>\n\tadrp\tx0, .LC0\n\tadd\tx0, x0, :lo12:.LC0\n\t<span class=\"token register variable\">bl</span>\tputs\n\tmov\tw0, <span class=\"token number\">0</span>\n\tldp\tx29, x30, <span class=\"token operator\">[</span><span class=\"token register variable\">sp</span><span class=\"token operator\">]</span>, <span class=\"token number\">16</span>\n\tret\n\t.size\tmain, .<span class=\"token operator\">-</span>main\n\t.ident\t<span class=\"token string\">\"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"</span>\n\t.section\t.note.GNU<span class=\"token operator\">-</span>stack,<span class=\"token string\">\"\"</span>,@progbits</code></pre></div>\n<h3 id=\"raspberry-pi\" style=\"position:relative;\"><a href=\"#raspberry-pi\" aria-label=\"raspberry pi permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Raspberry Pi</h3>\n<p>This method can be used to build applications that run on other ARM processors.\nFor example on Raspberry Pi devices, instead of <code class=\"language-text\">aarch64</code> and <code class=\"language-text\">arm64</code>, you\nwould expect something similar to <code class=\"language-text\">armv7l</code> and <code class=\"language-text\">armhf</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">uname</span> -a\nLinux raspberrypi <span class=\"token number\">4.19</span>.97-v7l+ <span class=\"token comment\">#1294 SMP [date] armv7l GNU/Linux</span>\ndpkg --print-architecture\narmhf</code></pre></div>","excerpt":"In this post, we will use  inside Docker to compile source\ncodes for  processors. If you want to know how to run an  Debian inside Docker skip to Qemu\nmultiarch ARM architecture A…","timeToRead":4,"fields":{"slug":"/how-to-compile-a-package-for-arm/"},"frontmatter":{"date":"04/28/2020","title":"How to compile a package for ARM","tags":["How-to"],"excerpt":null,"draft":null}}},{"node":{"id":"a69158b5-4e10-5314-a20d-44d591856a8a","html":"","excerpt":"","timeToRead":1,"fields":{"slug":"/__do-not-remove/"},"frontmatter":{"date":"11/11/1111","title":"dummy","tags":["___dummy*"],"excerpt":"","draft":false}}}]}},"pageContext":{}}}