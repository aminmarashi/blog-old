{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"bd7f8b24-6628-5592-ac6a-59865db80268","html":"<p>In this blog post, we will see how Chef can be built from source code. This is\nuseful when you want to install Chef on a distro or machine which is not\nsupported by default. Which is true for most ARM processors at the time of\nwriting this.</p>\n<h2 id=\"compiling-ruby\" style=\"position:relative;\"><a href=\"#compiling-ruby\" aria-label=\"compiling ruby permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compiling Ruby</h2>\n<p><strong>Note:</strong> You can skip this step and go directly to <a href=\"#compiling-chef\">Compiling Chef</a> if\nyour distro already has a suitable ruby version. In my case, the version was too\nold for the Chef build to work.</p>\n<p>The <a href=\"https://github.com/ruby/ruby#git\" target=\"_blank\">Ruby GitHub\npage</a> is very helpful when it comes to compiling Ruby from source code.</p>\n<p>The building process is as easy as:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span></span>./configure\n<span class=\"token function\">make</span></code></pre></div>\n<h3 id=\"installation-in-a-destination-directory\" style=\"position:relative;\"><a href=\"#installation-in-a-destination-directory\" aria-label=\"installation in a destination directory permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation in a destination directory</h3>\n<p>Now a <code class=\"language-text\">make install</code> will install Ruby in <code class=\"language-text\">/usr</code> directory, but that behavior\ncan be changed using <code class=\"language-text\">DESTDIR</code> option:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">make</span> <span class=\"token function\">install</span> <span class=\"token assign-left variable\">DESTDIR</span><span class=\"token operator\">=</span>~/ruby</code></pre></div>\n<p>The above command will install the build in <code class=\"language-text\">~/ruby</code>. This is useful if <code class=\"language-text\">root</code>\naccess is not available, or if the build is meant to be copied to a different\nmachine.</p>\n<h3 id=\"install-ruby-globally\" style=\"position:relative;\"><a href=\"#install-ruby-globally\" aria-label=\"install ruby globally permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install Ruby globally</h3>\n<p>After building Ruby, you can install it globally by:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -r ~/ruby/usr/* /usr</code></pre></div>\n<h2 id=\"compiling-chef\" style=\"position:relative;\"><a href=\"#compiling-chef\" aria-label=\"compiling chef permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compiling Chef</h2>\n<p>You will need <code class=\"language-text\">Ruby</code> and <code class=\"language-text\">bundler</code> to be installed to build Chef. <code class=\"language-text\">gem</code>\ncomes as a package with the <code class=\"language-text\">Ruby</code>.</p>\n<h3 id=\"installing-bundler\" style=\"position:relative;\"><a href=\"#installing-bundler\" aria-label=\"installing bundler permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing bundler</h3>\n<p>Make sure <code class=\"language-text\">bundler</code> is installed, if not install it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>gem <span class=\"token function\">install</span> bundler</code></pre></div>\n<h3 id=\"downloading-the-source\" style=\"position:relative;\"><a href=\"#downloading-the-source\" aria-label=\"downloading the source permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Downloading the source</h3>\n<p>Download the specific version of Chef source from <a\nhref=\"https://github.com/chef/chef/\" target=\"_blank\">Chef on GitHub</a> then\nextract the package.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span data-user=u data-host=h></span></span><span class=\"token function\">wget</span> https://github.com/chef/chef/archive/v15.6.10.tar.gz\n<span class=\"token function\">tar</span> xf v15.6.10.tar.gz\n<span class=\"token builtin class-name\">cd</span> ~/chef-15.6.10/omnibus <span class=\"token comment\"># yes, chef is built from the omnibus folder</span></code></pre></div>\n<h3 id=\"installing-dependencies\" style=\"position:relative;\"><a href=\"#installing-dependencies\" aria-label=\"installing dependencies permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing dependencies</h3>\n<p>Then install the <code class=\"language-text\">gem</code>s required for building chef locally:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>bundle <span class=\"token function\">install</span> --without development --path<span class=\"token operator\">=</span>.bundle</code></pre></div>\n<p>This will install all the dependencies in <code class=\"language-text\">.bundle</code> inside the source folder.</p>\n<h3 id=\"building-using-omnibus\" style=\"position:relative;\"><a href=\"#building-using-omnibus\" aria-label=\"building using omnibus permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building using omnibus</h3>\n<p>After that start building Chef using <code class=\"language-text\">omnibus</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>bundle <span class=\"token builtin class-name\">exec</span> omnibus build chef -l internal</code></pre></div>\n<p><a href=\"https://github.com/chef/omnibus\" target=\"_blank\">Omnibus</a> is a\npackaging solution that makes sure the packages and all its dependencies are\ninstalled in a way that is easily manageable and will not conflict with the\nexisting packages installed on your system.</p>\n<p>The result of the above build is a package specific to your OS, in this case,\nI'm building Chef for Debian, so there will be a <code class=\"language-text\">.deb</code> file that I will able\nto install and uninstall using <code class=\"language-text\">dpkg</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">ls</span> pkg/\nchef_15.6.10*.deb</code></pre></div>\n<h3 id=\"licensing-issues\" style=\"position:relative;\"><a href=\"#licensing-issues\" aria-label=\"licensing issues permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Licensing issues</h3>\n<p>In my case the build failed because of a licensing error, you can try\nignoring licensing problems for the build, read more about that in <a\nhref=\"https://github.com/chef/omnibus/issues/696\" target=\"_blank\">issue #696</a>.</p>\n<p>In my case, I fixed that by editing the <code class=\"language-text\">omnibus.rb</code> file (the omnibus config)\nand adding these two lines:</p>\n<div class=\"gatsby-code-title code-title-custom\">omnibus.rb</div>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">fatal_licensing_warnings <span class=\"token boolean\">false</span>\nfatal_transitive_dependency_licensing_warnings <span class=\"token boolean\">false</span></code></pre></div>\n<h3 id=\"installation-of-the-built-deb-package\" style=\"position:relative;\"><a href=\"#installation-of-the-built-deb-package\" aria-label=\"installation of the built deb package permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation of the built deb package</h3>\n<p>Now we can easily install the package:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">sudo</span> dpkg -i pkg/chef_15.6.10*.deb</code></pre></div>\n<p>And verify the desired version is installed:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span>chef-client -v\nChef Infra Client: <span class=\"token number\">15.6</span>.10</code></pre></div>","excerpt":"In this blog post, we will see how Chef can be built from source code. This is\nuseful when you want to install Chef on a distro or machine which is not\nsupported by default. Which…","timeToRead":3,"fields":{"slug":"/how-to-compile-chef-from-source/"},"frontmatter":{"date":"04/29/2020","title":"How to compile Chef from source","tags":["How-to"],"excerpt":null,"draft":null}}},{"node":{"id":"392dddc6-1f0d-5892-a395-d89ee74242f4","html":"<p>In this post, we will use <code class=\"language-text\">Qemu multiarch</code> inside Docker to compile C source\ncodes for ARM processors.</p>\n<p>If you want to know how to run an ARM64 Debian inside Docker skip to <a href=\"#qemu-multiarch\">Qemu\nmultiarch</a></p>\n<h2 id=\"arm-architecture\" style=\"position:relative;\"><a href=\"#arm-architecture\" aria-label=\"arm architecture permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARM architecture</h2>\n<p>ARM refers to a large group of CPU architectures designed for embedded systems\nand low-cost computing. There are many variations of ARM instruction code and\nunfortunately, they are not very compatible with each other.\nIt's important to identify the target architecture otherwise the built files\nmay not be compatible with the target machine.</p>\n<p>For this document, I am going to compile for <code class=\"language-text\">arm64</code> (aka <code class=\"language-text\">aarch64</code> as GCC calls\nit). This architecture is used on <code class=\"language-text\">AWS ARM instances</code> which are available for a\ncheaper price than the AMD64 ones.</p>\n<p>Let's check the architecture of a Debian machine running on <code class=\"language-text\">aarch64</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">uname</span> -a\nLinux <span class=\"token function\">hostname</span> <span class=\"token punctuation\">[</span>version<span class=\"token punctuation\">]</span> <span class=\"token comment\">#1 SMP Debian 4.9.210-1 [date] aarch64 GNU/Linux</span>\ndpkg --print-architecture\narm64</code></pre></div>\n<p>As you can see <code class=\"language-text\">arm64</code> and <code class=\"language-text\">aarch64</code> are used almost interchangeably.</p>\n<h2 id=\"building-using-docker\" style=\"position:relative;\"><a href=\"#building-using-docker\" aria-label=\"building using docker permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building using Docker</h2>\n<p>There are two ways we can go about building a source file for a different\narchitecture of your current machine (e.g. your machine runs on an <code class=\"language-text\">X86_64</code> CPU\nand you want to compile for <code class=\"language-text\">arm64</code>).</p>\n<p>One way is <code class=\"language-text\">cross-compiling</code> inside a machine with a different architecture\nusing <code class=\"language-text\">aarch64-linux-gnu-gcc</code> which is a GCC cross-compiler for <code class=\"language-text\">arm64</code>\narchitecture.</p>\n<p>The other (and less complicated) way is to make the package inside a Virtual\nMachine. I will use <code class=\"language-text\">Docker</code> with <code class=\"language-text\">Qemu multiarch</code> which acts similar to a VM\nand allows running Docker images built for other architectures including\n<code class=\"language-text\">aarch64</code>.</p>\n<h3 id=\"qemu-multiarch\" style=\"position:relative;\"><a href=\"#qemu-multiarch\" aria-label=\"qemu multiarch permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Qemu multiarch</h3>\n<p>First, we will need to enable <a href=\"https://github.com/multiarch/qemu-user-static\" target=\"_blank\"><code class=\"language-text\">qemu-user-static</code></a>\nwhich allows us to run the Docker image built for ARM.</p>\n<p><strong>Note:</strong> This setup uses <code class=\"language-text\">binfmt</code>, read more: <a href=\"https://en.wikipedia.org/wiki/Binfmt_misc\" target=\"_blank\"><code class=\"language-text\">binfmt_misc</code></a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>docker run --rm --privileged multiarch/qemu-user-static --reset -p <span class=\"token function\">yes</span></code></pre></div>\n<p>This will setup the multiarch files and now we can run Docker images that are\nbuilt for different architectures seamlessly.</p>\n<h3 id=\"debian-for-aarch64\" style=\"position:relative;\"><a href=\"#debian-for-aarch64\" aria-label=\"debian for aarch64 permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debian for aarch64</h3>\n<p>The Docker image for <code class=\"language-text\">aarch64</code> is officially deprecated in favor of <a href=\"https://hub.docker.com/r/arm64v8/debian/\" target=\"_blank\"><code class=\"language-text\">arch64v8</code></a>\nwhich has support for broader variants of the architecture.</p>\n<p>After enabling mutliarch, we can simply run the Debian image built for ARM:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span>docker run -it arm64v8/debian:stretch\nroot@3b853bce5181:/<span class=\"token comment\">#</span></code></pre></div>\n<p>Now we can see the architecture is shown to be ARM:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">uname</span> -a\nLinux 3b853bce5181 <span class=\"token number\">5.3</span>.0-46-generic <span class=\"token comment\">#38-Ubuntu SMP [date] aarch64 GNU/Linux</span>\ndpkg --print-architecture\narm64</code></pre></div>\n<p>That's it, we should now be able to download the source code and build it for\n<code class=\"language-text\">aarch64</code> inside that container.</p>\n<h3 id=\"building-a-simple-helloworld-in-c\" style=\"position:relative;\"><a href=\"#building-a-simple-helloworld-in-c\" aria-label=\"building a simple helloworld in c permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building a simple helloworld in C</h3>\n<p>Just for the sake of the demonstration, let's write a simple hello world <code class=\"language-text\">C</code> and\ncompile it for ARM.</p>\n<div class=\"gatsby-code-title code-title-custom\">helloworld.c</div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First we will need to install <code class=\"language-text\">gcc</code> to compile our source code:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> gcc <span class=\"token function\">file</span> -y</code></pre></div>\n<p>Then we can compile our source code and run it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span></span></span>gcc -o helloworld helloworld.c\n./helloworld\nHello, World<span class=\"token operator\">!</span></code></pre></div>\n<p>We can also use the <code class=\"language-text\">file</code> command to tell us about the binary format of the\nexecutable we just built:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">file</span> ./helloworld\nhelloworld: ELF <span class=\"token number\">64</span>-bit LSB shared object, ARM aarch64, version <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>SYSV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>It's correctly built for ARM 🎉.</p>\n<p>One little trick we can do with GCC is that we can see the assembler code,\ntherefore we can see what the instruction set looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>gcc -o helloworld.asm -S helloworld.c</code></pre></div>\n<p>Contents of <code class=\"language-text\">helloworld.asm</code> will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">\t.arch armv8<span class=\"token operator\">-</span>a\n\t.file\t<span class=\"token string\">\"helloworld.c\"</span>\n\t.section\t.rodata\n\t.align\t<span class=\"token number\">3</span>\n<span class=\"token label function\">.LC0:</span>\n\t.string\t<span class=\"token string\">\"Hello, World!\"</span>\n\t.text\n\t.align\t<span class=\"token number\">2</span>\n\t.<span class=\"token keyword\">global\tmain</span>\n\t.type\tmain, <span class=\"token operator\">%</span>function\n<span class=\"token label function\">main:</span>\n\tstp\tx29, x30, <span class=\"token operator\">[</span><span class=\"token register variable\">sp</span>, <span class=\"token operator\">-</span><span class=\"token number\">16</span><span class=\"token operator\">]</span><span class=\"token operator\">!</span>\n\tadd\tx29, <span class=\"token register variable\">sp</span>, <span class=\"token number\">0</span>\n\tadrp\tx0, .LC0\n\tadd\tx0, x0, :lo12:.LC0\n\t<span class=\"token register variable\">bl</span>\tputs\n\tmov\tw0, <span class=\"token number\">0</span>\n\tldp\tx29, x30, <span class=\"token operator\">[</span><span class=\"token register variable\">sp</span><span class=\"token operator\">]</span>, <span class=\"token number\">16</span>\n\tret\n\t.size\tmain, .<span class=\"token operator\">-</span>main\n\t.ident\t<span class=\"token string\">\"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"</span>\n\t.section\t.note.GNU<span class=\"token operator\">-</span>stack,<span class=\"token string\">\"\"</span>,@progbits</code></pre></div>\n<h3 id=\"raspberry-pi\" style=\"position:relative;\"><a href=\"#raspberry-pi\" aria-label=\"raspberry pi permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Raspberry Pi</h3>\n<p>This method can be used to build applications that run on other ARM processors.\nFor example on Raspberry Pi devices, instead of <code class=\"language-text\">aarch64</code> and <code class=\"language-text\">arm64</code>, you\nwould expect something similar to <code class=\"language-text\">armv7l</code> and <code class=\"language-text\">armhf</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">uname</span> -a\nLinux raspberrypi <span class=\"token number\">4.19</span>.97-v7l+ <span class=\"token comment\">#1294 SMP [date] armv7l GNU/Linux</span>\ndpkg --print-architecture\narmhf</code></pre></div>","excerpt":"In this post, we will use  inside Docker to compile C source\ncodes for ARM processors. If you want to know how to run an ARM64 Debian inside Docker skip to Qemu\nmultiarch ARM arch…","timeToRead":4,"fields":{"slug":"/how-to-compile-a-package-for-arm/"},"frontmatter":{"date":"04/28/2020","title":"How to compile a package for ARM","tags":["How-to"],"excerpt":null,"draft":null}}},{"node":{"id":"a69158b5-4e10-5314-a20d-44d591856a8a","html":"","excerpt":"","timeToRead":1,"fields":{"slug":"/__do-not-remove/"},"frontmatter":{"date":"11/11/1111","title":"dummy","tags":["___dummy*"],"excerpt":"","draft":false}}}]}},"pageContext":{}}}