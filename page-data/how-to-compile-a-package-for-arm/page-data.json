{"componentChunkName":"component---src-components-posts-post-template-index-jsx","path":"/how-to-compile-a-package-for-arm/","result":{"data":{"markdownRemark":{"html":"<p>In this post, we will use <code class=\"language-text\">Qemu multiarch</code> inside Docker to compile source\ncodes for <code class=\"language-text\">ARM</code> processors.</p>\n<blockquote>\n<p>If you want to know how to run an <code class=\"language-text\">ARM64</code> Debian inside Docker skip to <a href=\"#qemu-multiarch\">Qemu\nmultiarch</a></p>\n</blockquote>\n<h2 id=\"arm-architecture\" style=\"position:relative;\"><a href=\"#arm-architecture\" aria-label=\"arm architecture permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARM architecture</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/ARM_architecture\" target=\"_blank\">ARM</a>\nrefers to a large group of CPU architectures designed\nfor embedded systems and low-cost computing. There are many variations of ARM\ninstruction code and unfortunately, they are not very compatible with each\nother.  It's important to identify the target architecture otherwise the\nbuilt files may not be compatible with the target machine.</p>\n<p>For this post, I am going to compile for <code class=\"language-text\">arm64</code> (aka <code class=\"language-text\">aarch64</code> as GCC calls\nit). This architecture is used on <code class=\"language-text\">AWS ARM instances</code> which are available for a\ncheaper price than the <code class=\"language-text\">X86_64</code> ones.</p>\n<p>Let's check the architecture of a Debian machine running on <code class=\"language-text\">aarch64</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">uname</span> -a\nLinux <span class=\"token function\">hostname</span> <span class=\"token punctuation\">[</span>version<span class=\"token punctuation\">]</span> <span class=\"token comment\">#1 SMP Debian 4.9.210-1 [date] aarch64 GNU/Linux</span>\ndpkg --print-architecture\narm64</code></pre></div>\n<p>As you can see <code class=\"language-text\">arm64</code> and <code class=\"language-text\">aarch64</code> are used almost interchangeably.</p>\n<h2 id=\"building-using-docker\" style=\"position:relative;\"><a href=\"#building-using-docker\" aria-label=\"building using docker permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building using Docker</h2>\n<p>There are two ways we can go about building a source file for a different\narchitecture of your current machine (e.g. your machine runs on an <code class=\"language-text\">X86_64</code> CPU\nand you want to compile for <code class=\"language-text\">arm64</code>).</p>\n<p>One way is <code class=\"language-text\">cross-compiling</code> inside a machine with a different architecture\nusing <code class=\"language-text\">aarch64-linux-gnu-gcc</code> which is a GCC cross-compiler for <code class=\"language-text\">arm64</code>\narchitecture.</p>\n<p>The other (and less complicated) way is to make the package inside a Virtual\nMachine. I will use <code class=\"language-text\">Docker</code> with <code class=\"language-text\">Qemu multiarch</code> which acts similar to a VM\nand allows running Docker images built for other architectures including\n<code class=\"language-text\">aarch64</code>.</p>\n<h3 id=\"qemu-multiarch\" style=\"position:relative;\"><a href=\"#qemu-multiarch\" aria-label=\"qemu multiarch permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Qemu multiarch</h3>\n<p>First, we will need to enable\n<a href=\"https://github.com/multiarch/qemu-user-static\" target=\"_blank\">qemu-user-static</a>\nwhich allows us to run the Docker image built for ARM.</p>\n<p><strong>Note:</strong> This setup uses <code class=\"language-text\">binfmt</code>, read more:\n<a href=\"https://en.wikipedia.org/wiki/Binfmt_misc\" target=\"_blank\">binfmt_misc</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>docker run --rm --privileged multiarch/qemu-user-static --reset -p <span class=\"token function\">yes</span></code></pre></div>\n<p>This will setup the multiarch files and now we can run Docker images that are\nbuilt for different architectures seamlessly.</p>\n<h3 id=\"debian-for-aarch64\" style=\"position:relative;\"><a href=\"#debian-for-aarch64\" aria-label=\"debian for aarch64 permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debian for aarch64</h3>\n<p>After enabling mutliarch, we can simply run the Debian image built for ARM:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span>docker run -it arm64v8/debian:stretch\nroot@3b853bce5181:/<span class=\"token comment\">#</span></code></pre></div>\n<blockquote>\n<p>The Docker image for\n<a href=\"https://hub.docker.com/r/aarch64/debian\" target=\"_blank\">aarch64</a>\nis officially deprecated in favor of\n<a href=\"https://hub.docker.com/r/arm64v8/debian/\" target=\"_blank\">arch64v8</a>\nwhich has support for broader variants of the architecture.</p>\n</blockquote>\n<p>Now we can see the architecture is shown to be ARM:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">uname</span> -a\nLinux 3b853bce5181 <span class=\"token number\">5.3</span>.0-46-generic <span class=\"token comment\">#38-Ubuntu SMP [date] aarch64 GNU/Linux</span>\ndpkg --print-architecture\narm64</code></pre></div>\n<p>That's it, we should now be able to download the desired source code and build\nit for <code class=\"language-text\">aarch64</code> inside that container.</p>\n<p>For this post we will stick to a very simple program written in C.</p>\n<h3 id=\"building-a-simple-helloworld-in-c\" style=\"position:relative;\"><a href=\"#building-a-simple-helloworld-in-c\" aria-label=\"building a simple helloworld in c permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building a simple helloworld in C</h3>\n<p>Just for the sake of the demonstration, let's write a simple hello world <code class=\"language-text\">C</code> and\ncompile it for ARM.</p>\n<div class=\"gatsby-code-title code-title-custom\">helloworld.c</div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First we will need to install <code class=\"language-text\">gcc</code> to compile our source code:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span><span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> gcc <span class=\"token function\">file</span> -y</code></pre></div>\n<p>Then we can compile our source code and run it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span data-user=u data-host=h></span><span></span></span>gcc -o helloworld helloworld.c\n./helloworld\nHello, World<span class=\"token operator\">!</span></code></pre></div>\n<p>We can also use the <code class=\"language-text\">file</code> command to tell us about the binary format of the\nexecutable we just built:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">file</span> ./helloworld\nhelloworld: ELF <span class=\"token number\">64</span>-bit LSB shared object, ARM aarch64, version <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>SYSV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>It's correctly built for ARM 🎉.</p>\n<p>One little trick we can do with GCC is that we can see the assembler code,\ntherefore we can see what the instruction set looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span></span>gcc -o helloworld.asm -S helloworld.c</code></pre></div>\n<p>Contents of <code class=\"language-text\">helloworld.asm</code> will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">\t.arch armv8<span class=\"token operator\">-</span>a\n\t.file\t<span class=\"token string\">\"helloworld.c\"</span>\n\t.section\t.rodata\n\t.align\t<span class=\"token number\">3</span>\n<span class=\"token label function\">.LC0:</span>\n\t.string\t<span class=\"token string\">\"Hello, World!\"</span>\n\t.text\n\t.align\t<span class=\"token number\">2</span>\n\t.<span class=\"token keyword\">global\tmain</span>\n\t.type\tmain, <span class=\"token operator\">%</span>function\n<span class=\"token label function\">main:</span>\n\tstp\tx29, x30, <span class=\"token operator\">[</span><span class=\"token register variable\">sp</span>, <span class=\"token operator\">-</span><span class=\"token number\">16</span><span class=\"token operator\">]</span><span class=\"token operator\">!</span>\n\tadd\tx29, <span class=\"token register variable\">sp</span>, <span class=\"token number\">0</span>\n\tadrp\tx0, .LC0\n\tadd\tx0, x0, :lo12:.LC0\n\t<span class=\"token register variable\">bl</span>\tputs\n\tmov\tw0, <span class=\"token number\">0</span>\n\tldp\tx29, x30, <span class=\"token operator\">[</span><span class=\"token register variable\">sp</span><span class=\"token operator\">]</span>, <span class=\"token number\">16</span>\n\tret\n\t.size\tmain, .<span class=\"token operator\">-</span>main\n\t.ident\t<span class=\"token string\">\"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"</span>\n\t.section\t.note.GNU<span class=\"token operator\">-</span>stack,<span class=\"token string\">\"\"</span>,@progbits</code></pre></div>\n<h3 id=\"raspberry-pi\" style=\"position:relative;\"><a href=\"#raspberry-pi\" aria-label=\"raspberry pi permalink\" class=\"anchor-heading before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Raspberry Pi</h3>\n<p>This method can be used to build applications that run on other ARM processors.\nFor example on Raspberry Pi devices, instead of <code class=\"language-text\">aarch64</code> and <code class=\"language-text\">arm64</code>, you\nwould expect something similar to <code class=\"language-text\">armv7l</code> and <code class=\"language-text\">armhf</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=u data-host=h></span><span></span><span data-user=u data-host=h></span><span></span></span><span class=\"token function\">uname</span> -a\nLinux raspberrypi <span class=\"token number\">4.19</span>.97-v7l+ <span class=\"token comment\">#1294 SMP [date] armv7l GNU/Linux</span>\ndpkg --print-architecture\narmhf</code></pre></div>","excerpt":"In this post, we will use  inside Docker to compile source\ncodes for  processors. If you want to know how to run an  Debian inside Docker…","fields":{"slug":"/how-to-compile-a-package-for-arm/"},"frontmatter":{"title":"How to compile a package for ARM","date":"04/28/2020","tags":["How-to"]}}},"pageContext":{"slug":"/how-to-compile-a-package-for-arm/"}},"staticQueryHashes":["3649515864","63159454"]}